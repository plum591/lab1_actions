name: C++ CI

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}

    steps:
      - name: Generate version from run number
        id: bump_version
        run: |
          new_tag="v1.0.${{ github.run_number }}"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
          echo "New tag: $new_tag"

  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: bump-version
    outputs:
      deb_package: ${{ steps.find_package.outputs.deb_package }}
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      
      - name: Configure CMake
        run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DVERSION_PROJECT="${{ needs.bump-version.outputs.new_tag }}"
      
      - name: Build project
        run: cmake --build .
      
      - name: Run tests
        run: cmake --build . --target test
      
      - name: Create package
        run: cmake --build . --target package
      
      - name: Find DEB package
        id: find_package
        run: |
          deb_file=$(ls *.deb | head -1)
          echo "deb_package=$deb_file" >> $GITHUB_OUTPUT
          echo "Found package: $deb_file"
      
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-package
          path: ${{ steps.find_package.outputs.deb_package }}

  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    needs: bump-version
    steps:
      - uses: actions/checkout@v3

      - name: Clean build directory
        run: |
          Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue

      - name: Configure with Ninja
        run: |
          echo "Building version: ${{ needs.create-release.outputs.new_tag }}"
          cmake -G "Ninja" -S . -B build -DVERSION_PROJECT="${{ needs.create-release.outputs.new_tag }}"

      - name: Build project
        run: cmake --build build

      - name: Run and test
        run: |
          echo "1" | .\build\LAB1.exe
          echo "Program executed successfully"

      - name: Verify version
        run: |
          echo "=== Program output ==="
          $output = echo "1" | .\build\LAB1.exe
          echo $output
          if ($output -like "*Version*") {
            echo "✓ Version found in output"
          } else {
            echo "✗ Version not found in output"
          }

      - name: Package (Windows)
        run: |
          cmake --install build --prefix package
          cpack -G ZIP --config build/CPackConfig.cmake

      - name: Upload Windows package
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.new_tag }}
          files: LAB1-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: [bump-version, build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download Linux package
        uses: actions/download-artifact@v4
        with:
          name: linux-package
          path: artifacts/linux

      - name: Download Windows package
        uses: actions/download-artifact@v4
        with:
          name: windows-package
          path: artifacts/windows

      - name: Debug - List downloaded files
        run: |
          echo "=== Linux artifacts ==="
          ls -la artifacts/linux/ || echo "No linux artifacts"
          echo "=== Windows artifacts ==="
          ls -la artifacts/windows/ || echo "No windows artifacts"
          echo "=== Current directory ==="
          ls -la

      - name: Debug - Find all package files
        run: |
          find . -name "*.deb" -o -name "*.zip" | while read file; do
            echo "Found package: $file"
          done

      - name: Create Release with explicit file paths
        run: |
          # Найдем конкретные файлы
          DEB_FILE=$(find . -name "*.deb" -type f | head -1)
          ZIP_FILE=$(find . -name "*.zip" -type f | head -1)
          
          if [ -f "$DEB_FILE" ] && [ -f "$ZIP_FILE" ]; then
            echo "Uploading files: $DEB_FILE and $ZIP_FILE"
            gh release create "${{ needs.bump-version.outputs.new_tag }}" \
              --title "Release ${{ needs.bump-version.outputs.new_tag }}" \
              --notes "Automated release" \
              "$DEB_FILE" \
              "$ZIP_FILE"
          else
            echo "Error: Missing package files!"
            echo "DEB exists: $( [ -f "$DEB_FILE" ] && echo "yes" || echo "no" )"
            echo "ZIP exists: $( [ -f "$ZIP_FILE" ] && echo "yes" || echo "no" )"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}