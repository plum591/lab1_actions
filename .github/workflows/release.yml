name: C++ CI

on:
  push:
    branches:
      - main
      - feature/github_actions


jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions: write-all

    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}
      last_tag: ${{ steps.get_tag.outputs.last_tag }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags --force
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "last_tag=$last_tag" >> $GITHUB_ENV
          echo "last_tag=$last_tag" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          IFS='.' read -r major minor patch <<< "${last_tag//v/}"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Show version info
        run: |
          echo "Last tag: ${{ env.last_tag }}"
          echo "New tag: ${{ env.new_tag }}"

  build-linux:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: bump-version
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

  build-windows:
    runs-on: windows-latest
    permissions: write-all
    needs: bump-version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Boost via Chocolatey
        run: |
          choco install boost-msvc-14.3 -y --version=1.84.0
          echo "BOOST_ROOT=C:/local/boost_1_84_0" >> $env:GITHUB_ENV

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -DBOOST_ROOT="${{ env.BOOST_ROOT }}" -DPATCH_VERSION=${{ github.run_number }}

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Package (CPack)
        run: |
          cd build
          cpack -C Release

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: build/*.zip

  create-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3

      - name: Download Linux package
        uses: actions/download-artifact@v3
        with:
          name: linux-package
          path: .

      - name: Download Windows package
        uses: actions/download-artifact@v3
        with:
          name: windows-package
          path: .

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.bump-version.outputs.new_tag }}
          name: Release ${{ needs.bump-version.outputs.new_tag }}
          generate_release_notes: true
          files: |
            ${{ needs.build-linux.outputs.deb_package }}
            ${{ needs.build-windows.outputs.zip_package }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}