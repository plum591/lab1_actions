name: Build C++ Project with Boost

on:
  push:
    branches:
      - main
      - feature/github_actions
  pull_request:

jobs:
  windows-build:
    runs-on: windows-latest
    name: 'Windows Build'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Boost via Chocolatey
        run: |
          choco install boost-msvc-14.3 -y --version=1.84.0
          echo "BOOST_ROOT=C:/local/boost_1_84_0" >> $env:GITHUB_ENV

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -DBOOST_ROOT="${{ env.BOOST_ROOT }}" -DPATCH_VERSION=${{ github.run_number }}

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Package (CPack)
        run: |
          cd build
          cpack -C Release

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: build/*.zip

  linux-build:
    runs-on: ubuntu-latest
    name: 'Linux Build'
    permissions: write-all

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: ctest --output-on-failure
      - run: cpack -G DEB

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-package
          path: ./*.deb

  release:
    runs-on: ubuntu-latest
    needs: [windows-build, linux-build]
    permissions: write-all
    steps:
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-package
          path: ./artifacts

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-package
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/helloworld-0.0.${{ github.run_number }}-win64.zip
          asset_name: helloworld-0.0.${{ github.run_number }}-win64.zip
          asset_content_type: application/zip

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package