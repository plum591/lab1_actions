name: C++ CI

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags --force
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "last_tag=${last_tag}" >> $GITHUB_OUTPUT
          echo "LAST_TAG=${last_tag}" >> $GITHUB_ENV

      - name: Bump version
        id: bump_version
        run: |
          if [[ ! $LAST_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Last tag $LAST_TAG doesn't follow semver format, using v1.0.0 as base"
            new_tag="v1.0.${{ github.run_number }}"
          else
            clean_tag="${LAST_TAG#v}"
            echo "Clean tag: $clean_tag"
            
            IFS='.' read -r major minor patch <<< "$clean_tag"
            
            major=${major:-1}
            minor=${minor:-0}
            patch=${patch:-0}
            
            echo "Major: $major, Minor: $minor, Patch: $patch"
            
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
          fi
          
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
          echo "New tag: $new_tag"

  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: bump-version
    outputs:
      deb_package: ${{ steps.find_package.outputs.deb_package }}
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      
      - name: Configure CMake
        run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DVERSION_PROJECT="${{ needs.bump-version.outputs.new_tag }}"
      
      - name: Build project
        run: cmake --build .
      
      - name: Run tests
        run: cmake --build . --target test
      
      - name: Create package
        run: cmake --build . --target package
      
      - name: Find DEB package
        id: find_package
        run: |
          deb_file=$(ls *.deb | head -1)
          echo "deb_package=$deb_file" >> $GITHUB_OUTPUT
          echo "Found package: $deb_file"
      
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-package
          path: ${{ steps.find_package.outputs.deb_package }}

  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    needs: bump-version
    outputs:
      zip_package: ${{ steps.find_package.outputs.zip_package }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Boost via Chocolatey
        run: |
          choco install boost-msvc-14.3 -y --version=1.84.0
          echo "BOOST_ROOT=C:/local/boost_1_84_0" >> $env:GITHUB_ENV

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -DBOOST_ROOT="${{ env.BOOST_ROOT }}" -DPATCH_VERSION=${{ github.run_number }} -DVERSION_PROJECT="${{ needs.bump-version.outputs.new_tag }}"

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Package (CPack)
        run: |
          cd build
          cpack -C Release

      - name: Find ZIP package
        id: find_package
        run: |
          $zipFile = (Get-ChildItem -Path "build" -Filter "*.zip").Name
          echo "zip_package=$zipFile" >> $env:GITHUB_OUTPUT
          echo "Found package: $zipFile"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: build/${{ steps.find_package.outputs.zip_package }}

  create-release:
    needs: [bump-version, build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Linux package
        uses: actions/download-artifact@v4
        with:
          name: linux-package
          path: .

      - name: Download Windows package
        uses: actions/download-artifact@v4
        with:
          name: windows-package
          path: .

      - name: List downloaded files
        run: |
          echo "=== Files in current directory ==="
          ls -la
          echo "=== Files from linux package ==="
          ls -la *.deb || echo "No DEB files found"
          echo "=== Files from windows package ==="
          ls -la *.zip || echo "No ZIP files found"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.bump-version.outputs.new_tag }}
          name: Release ${{ needs.bump-version.outputs.new_tag }}
          generate_release_notes: true
          files: |
            *.deb
            *.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}