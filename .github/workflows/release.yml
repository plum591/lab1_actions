name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

permissions: write-all

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    env:
      VCPKG_TRIPLET: ${{ matrix.os == 'windows-latest' && 'x64-windows-static' || 'x64-linux' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install vcpkg
        shell: bash
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            ./vcpkg/bootstrap-vcpkg.bat
          else
            ./vcpkg/bootstrap-vcpkg.sh
          fi

      - name: Install Boost
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            ./vcpkg/vcpkg install boost-test:${{ env.VCPKG_TRIPLET }}
          else
            ./vcpkg/vcpkg install boost-test:${{ env.VCPKG_TRIPLET }}
          fi

      - name: Set VCPKG_TOOLCHAIN
        shell: bash
        run: echo "VCPKG_TOOLCHAIN='${{ github.workspace }}'/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

      - name: Configure CMake
        shell: bash
        run: cmake -S . -B build -DPATCH_VERSION=${{ github.run_number }} -DCMAKE_TOOLCHAIN_FILE='${{ env.VCPKG_TOOLCHAIN }}' -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TRIPLET }}

      - name: Build
        run: cmake --build build

      - name: Test
        run: cmake --build build --target test

      - name: Package
        run: cmake --build build --target package

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.os }}
          path: helloworld-1.0.${{ github.run_number }}-*.{deb,zip}
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download Ubuntu Package
        uses: actions/download-artifact@v4
        with:
          name: package-ubuntu-latest
          path: ubuntu-package

      - name: Download Windows Package
        uses: actions/download-artifact@v4
        with:
          name: package-windows-latest
          path: windows-package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Ubuntu Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu-package/helloworld-1.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-1.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-package/helloworld-1.0.${{ github.run_number }}-win64.zip
          asset_name: helloworld-1.0.${{ github.run_number }}-win64.zip
          asset_content_type: application/zip