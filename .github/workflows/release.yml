name: C++ CI/CD

on:
  push:
    branches: [ main, feature/github_actions ]
  pull_request:
    branches: [ main ]

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y libboost-test-dev cmake build-essential
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DPATCH_VERSION=${{ github.run_number }}
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Release
    
    - name: Run tests
      run: cd ${{github.workspace}}/build && ctest -V
    
    - name: Package
      run: cd ${{github.workspace}}/build && cpack

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        
    - name: Install vcpkg and dependencies
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg install boost-test:x64-windows
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DPATCH_VERSION=${{ github.run_number }} -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
    
    - name: Build
      run: cmake --build build --config Release
    
    - name: Run tests
      run: cd build && ctest -C Release -V

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        
    - name: Install dependencies
      run: brew install boost cmake
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DPATCH_VERSION=${{ github.run_number }}
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Release
    
    - name: Run tests
      run: cd ${{github.workspace}}/build && ctest -V

  create-release:
    needs: [build-ubuntu, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Ubuntu artifact
      uses: actions/download-artifact@v3
      with:
        name: ubuntu-package
        path: ./artifacts
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Release v1.0.${{ github.run_number }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/helloworld-0.0.${{ github.run_number }}-Linux.deb
        asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
        asset_content_type: application/vnd.debian.binary-package