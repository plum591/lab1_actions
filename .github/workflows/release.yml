name: C++ CI

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags --force
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "last_tag=$last_tag" >> $GITHUB_ENV
          echo "last_tag=$last_tag" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          IFS='.' read -r major minor patch <<< "${last_tag//v/}"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Show version info
        run: |
          echo "Last tag: ${{ env.last_tag }}"
          echo "New tag: ${{ env.new_tag }}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.new_tag }}
          name: Release ${{ env.new_tag }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Clean build directory
        run: |
          Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue

      - name: Configure with Ninja
        run: |
          echo "Building version: ${{ needs.create-release.outputs.new_tag }}"
          cmake -G "Ninja" -S . -B build -DVERSION_PROJECT="${{ needs.create-release.outputs.new_tag }}"

      - name: Build project
        run: cmake --build build

      - name: Run and test
        run: |
          echo "1" | .\build\LAB1.exe
          echo "Program executed successfully"

      - name: Verify version
        run: |
          echo "=== Program output ==="
          $output = echo "1" | .\build\LAB1.exe
          echo $output
          if ($output -like "*Version*") {
            echo "✓ Version found in output"
          } else {
            echo "✗ Version not found in output"
          }

      - name: Package (Windows)
        run: |
          cmake --install build --prefix package
          cpack -G ZIP --config build/CPackConfig.cmake

      - name: Upload Windows package
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.new_tag }}
          files: LAB1-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}